<!DOCTYPE html>
<html>
<%- include ('component/head.ejs') %> 
<body class="hold-transition skin-blue sidebar-mini">
<div class="wrapper">
  <%- include ('component/header.ejs') %> 
  
  <!-- Left side column. contains the logo and sidebar -->
  <%- include ('component/aside.ejs') %> 

  <!-- Content Wrapper. Contains page content -->
  <div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <section class="content-header">
      <h1>
        Dashboard
        <small>Control panel</small>
      </h1>
      <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>
        <li class="active">Dashboard</li>
      </ol>
    </section>

    <!-- Main content -->
   
    <head>
      <style>
          body {
              background-color: #eef2f7;
              font-family: 'Roboto', sans-serif;
          }
  
          .admin-products-container {
              margin-top: 40px;
              margin-left: 260px;
              padding: 25px;
              background-color: #ffffff;
              border-radius: 12px;
              box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
          }
  
          .headname {
              margin-left: 288px;
              margin-top: 80px;
              font-size: 36px;
              font-weight: bold;
              color: #343a40;
          }
  
          .search-container {
              display: flex;
              justify-content: center;
              margin-bottom: 20px;
          }
  
          .search-container .input-group {
              max-width: 500px;
              width: 100%;
              box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
          }
  
          .search-container .form-control {
              border-radius: 8px 0 0 8px;
              border: 1px solid #ced4da;
              height: 45px;
          }
  
          .search-container .btn {
              border-radius: 0 8px 8px 0;
              background-color: #007bff;
              color: #fff;
              font-weight: bold;
          }
  
          .products-table {
              width: 100%;
              border-collapse: collapse;
              border-radius: 8px;
              overflow: hidden;
          }
  
          .products-table thead {
              background-color: #007bff;
              color: white;
          }
  
          .products-table th, .products-table td {
              padding: 15px;
              vertical-align: middle;
              text-align: left;
          }
  
          .products-table th {
              font-weight: bold;
              font-size: 16px;
          }
  
          .products-table tbody tr {
              border-bottom: 1px solid #e9ecef;
          }
  
          .products-table tbody tr:nth-child(even) {
              background-color: #f8f9fa;
          }
  
          .products-table tbody tr:hover {
              background-color: #f1f3f5;
          }
  
          .btn-info {
              background-color: #17a2b8;
              border: none;
              font-weight: bold;
              padding: 8px 12px;
              border-radius: 6px;
              color: #fff;
          }
  
          .btn-info:hover {
              background-color: #138496;
          }
  
          .form-check-input {
              width: 30px;
              height: 20px;
              margin-right: 10px;
          }
  
          .status-label {
              font-weight: bold;
          }
  
          .pagination {
              display: flex;
              justify-content: center;
              margin-top: 30px;
          }
  
          .pagination .btn {
              margin: 0 5px;
              padding: 10px 15px;
              border-radius: 8px;
              font-weight: bold;
          }
  
          .pagination .btn-outline-primary {
              color: #007bff;
              border: 1px solid #007bff;
              background-color: #fff;
          }
  
          .pagination .btn-outline-primary:hover {
              background-color: #007bff;
              color: white;
          }
  
          .pagination .btn-primary {
              background-color: #007bff;
              color: white;
          }
  
          .pagination .btn-primary:hover {
              background-color: #0056b3;
          }
          .searchbtn{
              border: none;
              background-color: white;
              margin-left: 20px;
              margin-right: 25px;
          }
          
          .btn-danger {
              background-color: #dc3545;
              color: #fff;
              border-radius: 5px;
              padding: 8px 12px;
          }
          
          .btn-danger:hover {
              background-color: #c82333;
          }
          
          .btn-primary {
              background-color: #007bff;
              color: #fff;
              border-radius: 5px;
              padding: 8px 12px;
          }
          
          .btn-primary:hover {
              background-color: #0069d9;
          }
          
          .text-white {
              color: #fff !important;
              text-decoration: none;
          }
  
      </style>
  </head>
  
  
  <div class="admin-products-container">
      <div class="search-container">
          <form action="" method="get" class="w-100">
              <div class="input-group">
                  <input type="text" style="padding-left: 68px;" class="form-control" placeholder="Search products" name="search" value="<%= searchTerm || '' %>">
                  <button class="searchbtn" type="submit">Search</button>
              </div>
          </form>
      </div>
  
      <div class="table-responsive">
          <table class="table products-table">
              <thead>
                  <tr>
                      <th>Product Name</th>
                      <th>Category</th>
                      <th>Sale Price</th>
                      <th>Offers</th>
                      <th>OffersADD/OfferRemove</th>
                      <th>Quantity</th>
                      <th>Edit</th>
                      <th>List / Unlist</th>
                  </tr>
              </thead>
              <tbody>
                  <% data.forEach(function(product) { %>   
                  <tr data-product-id="<%= product._id %>">
                      <td><%= product.productName %></td>
                      <td><%= product.category.name %></td>
                      <td>â‚¹<%= product.salePrice %></td>
                      <% if (product.productOffers != null && product.productOffers > 0) { %>
                      <td class="text-start"><%= product.productOffers %>%</td>
                      <% } else { %>
                        <td class="text-start">NO Offers</td>
                      <% } %>
                      <td class="text-start">
                        <% if (product.productOffers != null && product.productOffers > 0) { %>
                          <button class="btn btn-danger" style="width: 120px" 
                                  onclick="handleOfferAction('<%= product._id %>', false)">
                            Remove Offer
                          </button>
                        <% } else { %>
                          <button class="btn btn-primary" style="width: 120px" 
                                  data-toggle="modal" data-target="#offerModal" 
                                  onclick="openOfferModal('<%= product._id %>', false)">
                            Add Offer
                          </button>
                        <% } %>
                      </td>
                      <td><%= product.quantity %></td>
                      <td>
                          <a href="/admin/editProduct?id=<%= product._id %>" class="btn btn-info">Edit</a>
                      </td>
                      <td>
                          <div class="form-check form-switch d-flex align-items-center justify-content-start">
                              <input type="checkbox" class="form-check-input toggle-status" 
                                     data-id="<%= product._id %>"
                                     <%= product.isListed ? 'checked' : '' %>
                              />
                              <span class="status-label ms-2 <%= product.isListed ? 'text-success' : 'text-danger' %>">
                                  <%= product.isListed ? 'Listed' : 'Unlisted' %>
                              </span>
                          </div>
                      </td>
                  </tr>
                  <% }); %>
              </tbody>
          </table>
      </div>
  
      <div class="pagination">
          <% if (currentPage > 1) { %>
              <a href="?page=<%= currentPage - 1 %><%= searchTerm ? '&search=' + searchTerm : '' %>" class="btn btn-outline-primary">Previous</a>
          <% } %>
          
          <% for (let i = 1; i <= totalPages; i++) { %>
              <a href="?page=<%= i %><%= searchTerm ? '&search=' + searchTerm : '' %>" 
                 class="btn <%= currentPage == i ? 'btn-primary' : 'btn-outline-primary' %>">
                  <%= i %>
              </a>
          <% } %>
          
          <% if (currentPage < totalPages) { %>
              <a href="?page=<%= currentPage + 1 %><%= searchTerm ? '&search=' + searchTerm : '' %>" class="btn btn-outline-primary">Next</a>
          <% } %>
      </div>
  </div>

<!-- Product Offer Modal -->
<div class="modal fade" id="offerModal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
        <h4 class="modal-title" id="modalTitle">Product Offer</h4>
      </div>
      <div class="modal-body">
        <form id="offerForm" method="post" action="/admin/addProductOffer" onsubmit="return addProductOffer(event)">
          <input type="hidden" id="productId" name="productId">
          <div class="form-group">
            <label for="discountPercentage">Discount (%)*</label>
            <input type="number" class="form-control" id="discountPercentage" name="discountPercentage" 
                   required min="1" max="99" placeholder="Enter discount percentage">
            <small class="text-muted">Enter discount percentage (1-99)</small>
            <div id="discount-error" class="text-danger"></div>
          </div>
          <div class="form-group">
            <label for="expiryDate">Expiry Date*</label>
            <input type="date" class="form-control" id="expiryDate" name="expiryDate" required>
            <small class="text-muted">Select the offer expiry date</small>
            <div id="expiry-error" class="text-danger"></div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button type="submit" form="offerForm" class="btn btn-primary">Save Offer</button>
      </div>
    </div>
  </div>
</div>

<!-- Toggle product listing status script -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.toggle-status').forEach(toggle => {
        toggle.addEventListener('change', function() {
            const productId = this.getAttribute('data-id');
            const statusLabel = this.nextElementSibling;
            const isListed = this.checked;

            // Show confirmation dialog
            Swal.fire({
                title: 'Confirm Status Change',
                text: `Are you sure you want to ${isListed ? 'list' : 'unlist'} this product?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, change it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Proceed with status change
                    fetch(`/admin/toggle-list/${productId}`, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ isListed })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Update status label and styling
                            if (data.isListed) {
                                statusLabel.textContent = 'Listed';
                                statusLabel.classList.remove('text-danger');
                                statusLabel.classList.add('text-success');
                            } else {
                                statusLabel.textContent = 'Unlisted';
                                statusLabel.classList.remove('text-success');
                                statusLabel.classList.add('text-danger');
                            }

                            // Show success toast
                            Swal.fire({
                                icon: 'success',
                                title: 'Product Status Updated',
                                text: data.message,
                                toast: true,
                                position: 'top-end',
                                showConfirmButton: false,
                                timer: 2000
                            });
                        } else {
                            // Revert toggle if API call fails
                            this.checked = !isListed;
                            
                            // Show error message
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: data.message || 'Failed to update product status'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        
                        // Revert toggle
                        this.checked = !isListed;
                        
                        // Show network error
                        Swal.fire({
                            icon: 'error',
                            title: 'Network Error',
                            text: 'Unable to update product status'
                        });
                    });
                } else {
                    // Revert toggle if user cancels
                    this.checked = !isListed;
                }
            });
        });
    });
    
    // Set minimum date to today for expiry date
    var today = new Date().toISOString().split('T')[0];
    $('#expiryDate').attr('min', today);
});
</script>

<!-- Product offer functionality scripts -->
<script>
function openOfferModal(productId, isUpdate) {
  try {
    console.log('Opening modal for product:', productId);
    console.log('Is Update:', isUpdate);

    // If it's an update (remove offer), directly call remove function
    if (isUpdate) {
      // Directly remove offer without modal or alert
      fetch('/admin/removeProductOffer', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          productId: productId
        })
      })
      .then(response => response.json())
      .then(data => {
        // Silently reload the page
        location.reload();
      })
      .catch(error => {
        console.error('Error removing offer:', error);
      });
      return;
    }

    // Set the product ID in the hidden input
    document.getElementById('productId').value = productId;

    // Update modal title and button text for adding offer
    const modalTitle = document.getElementById('modalTitle');
    const saveButton = document.querySelector('#offerForm + .modal-footer button[type="submit"]');
    
    modalTitle.textContent = 'Add Product Offer';
    saveButton.textContent = 'Add Offer';

    // Open the modal
    $('#offerModal').modal('show');
  } catch (error) {
    console.error('Error opening offer modal:', error);
  }
}

function validateOfferForm() {
  const discountPercentage = document.getElementById('discountPercentage').value;
  const expiryDate = document.getElementById('expiryDate').value;
  let isValid = true;

  // Clear previous errors
  document.getElementById('discount-error').textContent = '';
  document.getElementById('expiry-error').textContent = '';

  if (!discountPercentage || discountPercentage < 1 || discountPercentage > 99) {
    document.getElementById('discount-error').textContent = 
      'Please enter a valid discount percentage between 1 and 99';
    isValid = false;
  }

  if (!expiryDate) {
    document.getElementById('expiry-error').textContent = 
      'Please select an expiry date';
    isValid = false;
  } else {
    const selectedDate = new Date(expiryDate);
    const today = new Date();
    if (selectedDate < today) {
      document.getElementById('expiry-error').textContent = 
        'Expiry date cannot be in the past';
      isValid = false;
    }
  }

  return isValid;
}

function addProductOffer(event) {
  // If no event passed, prevent default form submission
  if (event) {
    event.preventDefault();
  }
  
  const productId = document.getElementById('productId').value;
  const discountPercentage = document.getElementById('discountPercentage').value;
  const expiryDate = document.getElementById('expiryDate').value;

  console.log('Adding Product Offer:', { productId, discountPercentage, expiryDate });

  // Basic client-side validation
  if (!productId || !discountPercentage || !expiryDate) {
    Swal.fire({
      icon: 'error',
      title: 'Validation Error',
      text: 'Please fill all required fields',
      showConfirmButton: true
    });
    return false;
  }

  const discount = parseFloat(discountPercentage);
  if (isNaN(discount) || discount < 0 || discount > 100) {
    Swal.fire({
      icon: 'error',
      title: 'Invalid Discount',
      text: 'Discount must be a number between 0 and 100',
      showConfirmButton: true
    });
    return false;
  }

  fetch('/admin/addProductOffer', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      productId,
      discountPercentage,
      expiryDate
    })
  })
  .then(response => response.json())
  .then(data => {
    console.log('Server Response:', data);
    
    if (data.success) {
      Swal.fire({
        icon: 'success',
        title: 'Success',
        text: data.message,
        showConfirmButton: false,
        timer: 1500
      }).then(() => {
        // Close modal and reload or update page
        $('#offerModal').modal('hide');
        location.reload();
      });
    } else {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: data.message,
        showConfirmButton: true
      });
    }
  })
  .catch(error => {
    console.error('Error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Network Error',
      text: 'Could not add product offer. Please try again.',
      showConfirmButton: true
    });
  });

  return false;
}

function handleOfferAction(productId, isAddOffer) {
  // If it's a remove offer action
  if (!isAddOffer) {
    // Directly remove offer without modal
    fetch('/admin/removeProductOffer', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        productId: productId
      })
    })
    .then(response => response.json())
    .then(data => {
      // Silently reload the page
      location.reload();
    })
    .catch(error => {
      console.error('Error removing offer:', error);
    });
  } else {
    // If it's an add offer action, open the modal
    openOfferModal(productId, false);
  }
}
</script>

<!-- Ensure SweetAlert2 is included -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/js/bootstrap.min.js"></script>
</body>
</html>
