<!DOCTYPE html>
<html>
<%- include ('component/head.ejs') %> 
<body class="hold-transition skin-blue sidebar-mini">
<div class="wrapper">
  <%- include ('component/header.ejs') %> 
  <%- include ('component/aside.ejs') %> 

  <!-- Stylesheets -->
  <link href="/admin-assets/main.css" rel="stylesheet" type="text/css" />
  <link href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/sweetalert2/dist/sweetalert2.min.css" rel="stylesheet">

  <style>
    .form-section {
      background: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      margin-bottom: 20px;
    }

    .image-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
      gap: 15px;
      margin: 15px 0;
    }

    .image-item {
      position: relative;
      border: 1px solid #ddd;
      border-radius: 4px;
      overflow: hidden;
    }

    .image-item img {
      width: 100%;
      height: 150px;
      object-fit: cover;
    }

    .delete-btn {
      position: absolute;
      top: 5px;
      right: 5px;
      background: rgba(255, 0, 0, 0.8);
      color: white;
      border: none;
      border-radius: 50%;
      width: 25px;
      height: 25px;
      cursor: pointer;
    }

    .upload-box {
      border: 2px dashed #ddd;
      padding: 20px;
      text-align: center;
      margin: 10px 0;
      cursor: pointer;
      position: relative;
    }

    .upload-box:hover {
      border-color: #007bff;
    }

    .preview-container {
      max-width: 100%;
      margin: 15px 0;
      display: none;
    }

    .preview-container img {
      max-width: 100%;
      max-height: 400px;
    }

    .crop-controls {
      margin: 10px 0;
      display: none;
    }

    .product-info {
      margin-bottom: 20px;
    }

    .form-group {
      margin-bottom: 15px;
    }

    .form-label {
      font-weight: 600;
      margin-bottom: 5px;
      display: block;
    }

    .btn-action {
      margin-top: 5px;
      margin-bottom: 5px;
    }
  </style>

  <div class="content-wrapper">
    <section class="content-header">
      <h1>Edit Product <small>Manage product details</small></h1>
      <ol class="breadcrumb">
        <li><a href="/admin/dashboard"><i class="fa fa-dashboard"></i> Home</a></li>
        <li><a href="/admin/products">Products</a></li>
        <li class="active">Edit Product</li>
      </ol>
    </section>

    <section class="content">
      <form method="post" action="/admin/editProduct/<%=product._id%>" enctype="multipart/form-data" id="productForm">
        <!-- Product Basic Info -->
        <div class="form-section">
          <h4><i class="fa fa-info-circle"></i> Basic Information</h4>
          <div class="form-group">
            <label class="form-label">Product Name</label>
            <input type="text" name="productName" value="<%=product.productName%>" class="form-control">
          </div>

          <div class="form-group">
            <label class="form-label">Description</label>
            <textarea name="description" class="form-control" rows="3"><%=product.description%></textarea>
          </div>

          <div class="row">
            <div class="col-md-6">
              <div class="form-group">
                <label class="form-label">Regular Price</label>
                <input type="number" name="regularPrice" value="<%=product.regularPrice%>" class="form-control">
              </div>
            </div>
            <div class="col-md-6">
              <div class="form-group">
                <label class="form-label">Sale Price</label>
                <input type="number" name="salePrice" value="<%=product.salePrice%>" class="form-control">
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6">
              <div class="form-group">
                <label class="form-label">Category</label>
                <select name="category" class="form-control">
                    <% for (let i = 0; i < cat.length; i++) { %>
                        <option value="<%= cat[i]._id %>" 
                            <%= (product.category && product.category.toString() === cat[i]._id.toString()) || (!product.category && i === 0) ? 'selected' : '' %>>
                            <%= cat[i].name %>
                        </option>
                    <% } %>
                </select>
              </div>
            </div>
            <div class="col-md-6">
              <div class="form-group">
                <label class="form-label">Stock</label>
                <input type="number" name="
                quantity" value="<%=product.
quantity%>" class="form-control">
              </div>
            </div>
          </div>
        </div>

        <!-- Product Images -->
        <div class="form-section">
          <h4><i class="fa fa-images"></i> Product Images</h4>
          
          <!-- Existing Images -->
          <div class="image-grid">
            <% product.productImages.forEach((image, index) => { %>
              <div class="image-item">
                <img src="/uploads/product-images/<%= image %>" alt="Product Image">
                <button type="button" class="delete-btn" onclick="deleteImage('<%= image %>', '<%= product._id %>')">Ã—</button>
              </div>
            <% }); %>
          </div>

          <!-- Image Upload -->
          <% for(let i=1; i<=4; i++) { %>
            <div class="upload-box" onclick="document.getElementById('input<%=i%>').click()">
              <i class="fa fa-cloud-upload fa-2x"></i>
              <p>Click to upload image <%=i%></p>
              <input type="file" id="input<%=i%>" name="images" accept="image/*" 
                     style="display: none" onchange="handleImageUpload(event, <%=i%>)">
            </div>
            <div id="preview<%=i%>" class="preview-container">
              <img id="previewImage<%=i%>" src="">
              <div id="cropControls<%=i%>" class="crop-controls">
                <button type="button" class="btn btn-primary" onclick="saveCrop(<%=i%>)">
                  Save Crop
                </button>
                <button type="button" class="btn btn-danger" onclick="cancelCrop(<%=i%>)">
                  Cancel
                </button>
              </div>
            </div>
          <% } %>
        </div>

        <div class="form-section">
          <button type="submit" class="btn btn-primary btn-lg">Update Product</button>
          <a href="/admin/products" class="btn btn-default btn-lg">Cancel</a>
        </div>
      </form>
    </section>
  </div>
</div>

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2/dist/sweetalert2.all.min.js"></script>

<script>
let croppers = {};

function handleImageUpload(event, index) {
  const file = event.target.files[0];
  if (!file) return;

  if (!file.type.startsWith('image/')) {
    Swal.fire('Error', 'Please upload an image file', 'error');
    return;
  }

  const reader = new FileReader();
  reader.onload = (e) => {
    const previewContainer = document.getElementById(`preview${index}`);
    const previewImage = document.getElementById(`previewImage${index}`);
    const cropControls = document.getElementById(`cropControls${index}`);

    previewImage.src = e.target.result;
    previewContainer.style.display = 'block';
    cropControls.style.display = 'block';

    if (croppers[index]) {
      croppers[index].destroy();
    }

    croppers[index] = new Cropper(previewImage, {
      aspectRatio: 1,
      viewMode: 1,
      autoCropArea: 1,
      zoomable: false,
      crop: function(event) {
        // Optional: Add any crop event handling here
      }
    });
  };
  reader.readAsDataURL(file);
}

function saveCrop(index) {
  const cropper = croppers[index];
  if (!cropper) return;

  const canvas = cropper.getCroppedCanvas({
    width: 600,
    height: 600
  });

  canvas.toBlob((blob) => {
    const file = new File([blob], `image-${index}.png`, { type: 'image/png' });
    const dataTransfer = new DataTransfer();
    dataTransfer.items.add(file);
    document.getElementById(`input${index}`).files = dataTransfer.files;

    // Update preview
    const previewImage = document.getElementById(`previewImage${index}`);
    previewImage.src = canvas.toDataURL();

    // Cleanup
    cropper.destroy();
    croppers[index] = null;
    document.getElementById(`cropControls${index}`).style.display = 'none';

    Swal.fire({
      icon: 'success',
      title: 'Image Cropped',
      text: 'The image has been cropped successfully',
      timer: 1500
    });
  });
}

function cancelCrop(index) {
  if (croppers[index]) {
    croppers[index].destroy();
    croppers[index] = null;
  }
  document.getElementById(`preview${index}`).style.display = 'none';
  document.getElementById(`input${index}`).value = '';
}

function deleteImage(imageName, productId) {
  Swal.fire({
    title: 'Delete Image?',
    text: 'This action cannot be undone',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#d33',
    cancelButtonColor: '#3085d6',
    confirmButtonText: 'Delete'
  }).then((result) => {
    if (result.isConfirmed) {
      fetch('/admin/deleteImage', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          imageNameToServer: imageName,
          productIdToServer: productId
        })
      }).then(response => {
        if (response.ok) {
          Swal.fire('Deleted!', 'Image has been removed.', 'success')
            .then(() => location.reload());
        }
      });
    }
  });
}
</script>
<script>
    // Form submission handler (fixed version)
    document.getElementById('productForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      // Basic validation example
      const productName = this.productName.value.trim();
      if (!productName) {
        Swal.fire('Error', 'Product name is required', 'error');
        return;
      }
    
      Swal.fire({
        title: 'Updating Product',
        text: 'Please wait...',
        allowOutsideClick: false,
        didOpen: () => Swal.showLoading()
      });
    
      try {
        const response = await fetch(this.action, {
          method: 'POST',
          body: new FormData(this)
        });
    
        const data = await response.json();
        
        if (data.success) {
          Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: 'Product updated successfully',
            timer: 2000,
            showConfirmButton: false
          }).then(() => {
            window.location.href = '/admin/products';
          });
        } else {
          throw new Error(data.message || 'Update failed');
        }
      } catch (error) {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: error.message || 'Failed to update product. Please try again.'
        });
      }
    });
    
    // Fixed deleteImage function
    async function deleteImage(imageName, productId) {
      const { isConfirmed } = await Swal.fire({
        title: 'Delete Image?',
        text: 'This action cannot be undone',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
      });
    
      if (isConfirmed) {
        try {
          const response = await fetch('/admin/deleteImage', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ imageNameToServer: imageName, productIdToServer: productId })
          });
          
          if (response.ok) {
            Swal.fire('Deleted!', 'Image has been removed.', 'success');
            // Remove image from DOM without reload
            document.querySelector(`img[src*="${imageName}"]`).closest('.image-item').remove();
          }
        } catch (error) {
          Swal.fire('Error', 'Failed to delete image', 'error');
        }
      }
    }
    </script>
    

</body>
</html>