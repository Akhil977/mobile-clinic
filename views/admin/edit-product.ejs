<!DOCTYPE html>
<html>
<%- include ('component/head.ejs') %> 
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
<body class="hold-transition skin-blue sidebar-mini">
<div class="wrapper">
  <%- include ('component/header.ejs') %> 
  <%- include ('component/aside.ejs') %> 

  <!-- Stylesheets -->
  <link href="/admin-assets/main.css" rel="stylesheet" type="text/css" />
  <link href="https://cdn.jsdelivr.net/npm/sweetalert2/dist/sweetalert2.min.css" rel="stylesheet">

  <style>
    .form-section {
      background: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      margin-bottom: 20px;
    }

    .image-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
      gap: 15px;
      margin: 15px 0;
    }

    .image-item {
      position: relative;
      border: 1px solid #ddd;
      border-radius: 4px;
      overflow: hidden;
    }

    .image-item img {
      width: 100%;
      height: 150px;
      object-fit: cover;
    }

    .delete-btn {
      position: absolute;
      top: 5px;
      right: 5px;
      background: rgba(255, 0, 0, 0.8);
      color: white;
      border: none;
      border-radius: 50%;
      width: 25px;
      height: 25px;
      cursor: pointer;
    }

    .upload-box {
      border: 2px dashed #ccc;
      padding: 20px;
      text-align: center;
      border-radius: 8px;
      background: #f9f9f9;
      transition: all 0.3s ease;
    }

    .upload-box:hover {
      border-color: #007bff;
      background: #f0f7ff;
    }

    .upload-box i {
      color: #007bff;
      margin-bottom: 10px;
    }

    .upload-box p {
      margin: 5px 0;
      color: #333;
    }

    .image-info {
      margin-top: 10px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .upload-label {
      display: block;
      cursor: pointer;
      margin: 15px 0;
    }

    .preview-container {
      max-width: 100%;
      margin: 15px 0;
      display: none;
    }

    .preview-container img {
      max-width: 100%;
      max-height: 400px;
    }

    .crop-controls {
      margin: 10px 0;
      display: none;
    }

    .product-info {
      margin-bottom: 20px;
    }

    .form-group {
      margin-bottom: 15px;
    }

    .form-label {
      font-weight: 600;
      margin-bottom: 5px;
      display: block;
    }

    .btn-action {
      margin-top: 5px;
      margin-bottom: 5px;
    }

    .image-upload-section {
        margin: 20px 0;
        padding: 20px;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .image-upload-container {
        margin-top: 20px;
    }

    .image-upload-row {
        display: flex;
        align-items: flex-start;
        gap: 20px;
        margin-bottom: 20px;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
    }

    .file-input-wrapper {
        flex: 1;
        position: relative;
    }

    .image-preview {
        width: 100%;
        max-width: 300px;
        height: auto;
        display: block;
        margin-bottom: 10px;
    }

    .image-cropper {
        flex: 1;
        display: none;
        padding: 15px;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .image-cropper img {
        max-width: 100%;
        height: auto;
    }

    .save-button {
        margin-top: 10px;
        padding: 8px 15px;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .save-button:hover {
        background: #0056b3;
    }

    .thumbnails-container {
        display: flex;
        gap: 15px;
        flex-wrap: wrap;
        margin-top: 20px;
    }

    .thumbnail {
        position: relative;
        width: 100px;
        height: 100px;
        border-radius: 8px;
        overflow: hidden;
    }

    .thumbnail img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .remove-image-btn {
        position: absolute;
        top: 5px;
        right: 5px;
        width: 20px;
        height: 20px;
        background: rgba(255, 0, 0, 0.8);
        color: white;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 14px;
        padding: 0;
        line-height: 1;
    }
  </style>

  <div class="content-wrapper">
    <section class="content-header">
      <h1>Edit Product <small>Manage product details</small></h1>
      <ol class="breadcrumb">
        <li><a href="/admin/dashboard"><i class="fa fa-dashboard"></i> Home</a></li>
        <li><a href="/admin/products">Products</a></li>
        <li class="active">Edit Product</li>
      </ol>
    </section>

    <section class="content">
      <form method="post" action="/admin/editProduct/<%=product._id%>" enctype="multipart/form-data" id="productForm">
        <!-- Product Basic Info -->
        <div class="form-section">
          <h4><i class="fa fa-info-circle"></i> Basic Information</h4>
          <div class="form-group">
            <label class="form-label">Product Name</label>
            <input type="text" name="productName" value="<%=product.productName%>" class="form-control">
          </div>

          <div class="form-group">
            <label class="form-label">Description</label>
            <textarea name="description" class="form-control" rows="3"><%=product.description%></textarea>
          </div>

          <div class="row">
            <div class="col-md-6">
              <div class="form-group">
                <label class="form-label">Regular Price</label>
                <input type="number" name="regularPrice" value="<%=product.regularPrice%>" class="form-control">
              </div>
            </div>
            <div class="col-md-6">
              <div class="form-group">
                <label class="form-label">Sale Price</label>
                <input type="number" name="salePrice" value="<%=product.salePrice%>" class="form-control">
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6">
              <div class="form-group">
                <label class="form-label">Category</label>
                <select name="category" class="form-control">
                    <% for (let i = 0; i < cat.length; i++) { %>
                        <option value="<%= cat[i]._id %>" 
                            <%= (product.category && product.category.toString() === cat[i]._id.toString()) || (!product.category && i === 0) ? 'selected' : '' %>>
                            <%= cat[i].name %>
                        </option>
                    <% } %>
                </select>
              </div>
            </div>
            <div class="col-md-6">
              <div class="form-group">
                <label class="form-label">Stock</label>
                <input type="number" name="quantity" value="<%=product.quantity%>" class="form-control">
              </div>
            </div>
          </div>
        </div>

        <!-- Product Images -->
        <div class="card mb-4 image-upload-section">
            <div class="card-header">
                <h4>Product Images (3-4 Required)</h4>
            </div>
            <div class="card-body">
                <!-- Existing Images -->
                <div class="border row mb-3">
                    <div id="existingImagesContainer" class="thumbnails-container">
                        <% product.productImages.forEach((image, index) => { %>
                            <div class="thumbnail" data-image="<%= image %>">
                                <img src="/uploads/product-images/<%= image %>" alt="Product Image">
                                <button type="button" class="remove-image-btn" onclick="deleteImage('<%= image %>', '<%= product._id %>')">Ã—</button>
                            </div>
                        <% }); %>
                    </div>
                </div>

                <!-- New Image Uploads -->
                <div class="image-upload-container">
                    <!-- First Image Upload -->
                    <div class="image-upload-row">
                        <div class="file-input-wrapper">
                            <img src="" alt="Image Preview" id="imgView1" class="image-preview">
                            <input class="form-control file-input" type="file" name="images"
                                id="input1" accept="image/png, image/jpeg, image/jpg">
                        </div>
                        <div class="image-cropper">
                            <img src="" id="croppedImg1" alt="Cropped Image">
                            <button type="button" id="saveButton1" class="btn btn-primary btn-sm save-button">Save Crop</button>
                        </div>
                    </div>

                    <!-- Second Image Upload -->
                    <div class="image-upload-row">
                        <div class="file-input-wrapper">
                            <img src="" alt="Image Preview" id="imgView2" class="image-preview">
                            <input class="form-control file-input" type="file" name="images"
                                id="input2" accept="image/png, image/jpeg, image/jpg">
                        </div>
                        <div class="image-cropper">
                            <img src="" id="croppedImg2" alt="Cropped Image">
                            <button type="button" id="saveButton2" class="btn btn-primary btn-sm save-button">Save Crop</button>
                        </div>
                    </div>

                    <!-- Third Image Upload -->
                    <div class="image-upload-row">
                        <div class="file-input-wrapper">
                            <img src="" alt="Image Preview" id="imgView3" class="image-preview">
                            <input class="form-control file-input" type="file" name="images"
                                id="input3" accept="image/png, image/jpeg, image/jpg">
                        </div>
                        <div class="image-cropper">
                            <img src="" id="croppedImg3" alt="Cropped Image">
                            <button type="button" id="saveButton3" class="btn btn-primary btn-sm save-button">Save Crop</button>
                        </div>
                    </div>

                    <!-- Fourth Image Upload -->
                    <div class="image-upload-row">
                        <div class="file-input-wrapper">
                            <img src="" alt="Image Preview" id="imgView4" class="image-preview">
                            <input class="form-control file-input" type="file" name="images"
                                id="input4" accept="image/png, image/jpeg, image/jpg">
                        </div>
                        <div class="image-cropper">
                            <img src="" id="croppedImg4" alt="Cropped Image">
                            <button type="button" id="saveButton4" class="btn btn-primary btn-sm save-button">Save Crop</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="form-section">
          <button type="submit" class="btn btn-primary btn-lg">Update Product</button>
          <a href="/admin/products" class="btn btn-default btn-lg">Cancel</a>
        </div>
      </form>
    </section>
  </div>
</div>

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2/dist/sweetalert2.all.min.js"></script>

<script>
  // Store croppers for each image
  let croppers = {};

  // Initialize event listeners for file inputs
  document.getElementById('input1').addEventListener('change', (e) => viewImage(e, 1));
  document.getElementById('input2').addEventListener('change', (e) => viewImage(e, 2));
  document.getElementById('input3').addEventListener('change', (e) => viewImage(e, 3));
  document.getElementById('input4').addEventListener('change', (e) => viewImage(e, 4));

  function viewImage(event, index) {
      const input = event.target;
      const imgView = document.getElementById(`imgView${index}`);
      const cropperContainer = document.querySelector(`#input${index}`).closest('.image-upload-row').querySelector('.image-cropper');
      const croppedImg = document.getElementById(`croppedImg${index}`);

      // Destroy existing cropper if any
      if (croppers[index]) {
          croppers[index].destroy();
          croppers[index] = null;
      }

      if (input.files && input.files[0]) {
          const reader = new FileReader();
          
          reader.onload = function(e) {
              // Set the source of the preview image
              imgView.src = e.target.result;
              
              // Initialize cropper after image is loaded
              imgView.onload = function() {
                  croppers[index] = new Cropper(imgView, {
                      aspectRatio: 1,
                      viewMode: 1,
                      guides: true,
                      background: false,
                      autoCropArea: 0.8,
                      zoomable: true,
                      center: true,
                      cropBoxResizable: true
                  });
                  
                  // Show the cropper container
                  cropperContainer.style.display = 'block';
              };

              // Setup save button handler
              const saveButton = document.querySelector(`#saveButton${index}`);
              saveButton.onclick = function() {
                  if (croppers[index]) {
                      // Get the cropped canvas
                      const croppedCanvas = croppers[index].getCroppedCanvas();
                      
                      // Set the cropped image
                      croppedImg.src = croppedCanvas.toDataURL('image/jpeg');
                      
                      // Convert canvas to blob and create new file input
                      croppedCanvas.toBlob((blob) => {
                          const fileName = `cropped-image-${index}.jpg`;
                          const croppedFile = new File([blob], fileName, { type: 'image/jpeg' });
                          
                          // Create a new FileList with the cropped image
                          const dataTransfer = new DataTransfer();
                          dataTransfer.items.add(croppedFile);
                          
                          // Update the original file input
                          input.files = dataTransfer.files;
                      }, 'image/jpeg');
                      
                      // Hide cropper container
                      cropperContainer.style.display = 'none';
                      
                      // Destroy cropper
                      croppers[index].destroy();
                      croppers[index] = null;

                      // Update total image count
                      updateImageCount();
                  }
              };
          };
          
          reader.readAsDataURL(input.files[0]);
      }
  }

  function updateImageCount() {
      const existingImages = document.querySelectorAll('#existingImagesContainer .thumbnail').length;
      const newImages = Array.from(document.querySelectorAll('.file-input')).filter(input => input.files.length > 0).length;
      const totalImages = existingImages + newImages;

      // Update UI to show current count
      document.querySelector('.card-header h4').textContent = `Product Images (${totalImages}/4 Selected)`;
  }

  // Submit handler
  document.getElementById('productForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const formData = new FormData(this);
      const existingImages = document.querySelectorAll('#existingImagesContainer .thumbnail').length;
      const newImages = Array.from(document.querySelectorAll('.file-input')).filter(input => input.files.length > 0).length;
      const totalImages = existingImages + newImages;

      if (totalImages < 3 || totalImages > 4) {
          Swal.fire({
              title: 'Image Count Error',
              text: `Products must have between 3 and 4 images. You currently have ${totalImages} image(s).`,
              icon: 'error'
          });
          return;
      }

      try {
          // Show loading state
          Swal.fire({
              title: 'Updating Product',
              text: 'Please wait while we save your changes...',
              allowOutsideClick: false,
              didOpen: () => {
                  Swal.showLoading();
              }
          });

          const response = await fetch(this.action, {
              method: 'POST',
              body: formData
          });

          const result = await response.json();
          
          if (result.success) {
              Swal.fire({
                  icon: 'success',
                  title: 'Success!',
                  text: result.message,
                  timer: 1500,
                  showConfirmButton: false
              }).then(() => {
                  window.location.href = '/admin/products';
              });
          } else {
              throw new Error(result.error || 'Update failed');
          }
      } catch (error) {
          Swal.fire({
              icon: 'error',
              title: 'Error',
              text: error.message || 'Failed to update product. Please try again.'
          });
      }
  });

  // Initialize image count on page load
  updateImageCount();

  function deleteImage(imageName, productId) {
      Swal.fire({
          title: 'Delete Image?',
          text: 'This action cannot be undone',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#d33',
          cancelButtonColor: '#3085d6',
          confirmButtonText: 'Yes, delete it!'
      }).then((result) => {
          if (result.isConfirmed) {
              fetch('/admin/deleteImage', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                      imageNameToServer: imageName,
                      productIdToServer: productId
                  })
              })
              .then(response => response.json())
              .then(data => {
                  if (data.success) {
                      Swal.fire({
                          icon: 'success',
                          title: 'Deleted!',
                          text: 'Image has been deleted.',
                          timer: 1500,
                          showConfirmButton: false
                      }).then(() => {
                          location.reload();
                      });
                  } else {
                      Swal.fire('Error!', data.error, 'error');
                  }
              })
              .catch(error => {
                  console.error('Error:', error);
                  Swal.fire('Error!', 'Something went wrong.', 'error');
              });
          }
      });
  }
</script>
</body>
</html>