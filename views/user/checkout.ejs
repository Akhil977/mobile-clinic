<!DOCTYPE html>
<html lang="en">
	<%- include ('component/head.ejs') %> 
<body class="animsition">
	
	<!-- Header -->
	<%- include ('component/header.ejs') %> 

	<!-- Cart -->
	<%- include ('component/cart.ejs') %> 

	<!-- breadcrumb -->
	<div class="container">
		<div class="bread-crumb flex-w p-l-25 p-r-15 p-t-30 p-lr-0-lg">
			<a href="/" class="stext-109 cl8 hov-cl1 trans-04">
				Home
				<i class="fa fa-angle-right m-l-9 m-r-10" aria-hidden="true"></i>
			</a>
			<span class="stext-109 cl4">Shopping Cart</span>
		</div>
	</div>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .checkout-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .section-title {
            font-size: 1.5rem;
            color: #2d3436;
            margin-bottom: 1.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #e2e8f0;
        }

        .address-card {
            background: #fff;
            border: 1px solid #e2e8f0;
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        .address-box {
            background: #fff;
            border: 1px solid #e2e8f0;
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }


        .address-card:hover {
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }

        .address-card.selected {
            border: 2px solid #4CAF50;
        }

        .product-card {
            background: #fff;
            border-radius: 10px;
            padding: 1.5rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .payment-methods {
            background: #fff;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 0.75rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .payment-methods:hover {
            background: #f8f9fa;
        }

        .payment-methods.selected {
            border-color: #4CAF50;
            background: #f1f8f1;
        }

        .payment-icon {
            width: 24px;
            margin-right: 10px;
        }

        .coupon-section {
            background: #fff;
            border-radius: 10px;
            padding: 1.5rem;
            margin-top: 1.5rem;
        }

        .coupon-input {
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 0.75rem;
            width: 70%;
        }

        .apply-btn {
            background: #4CAF50;
            color: white;
            border: none;
            border-radius: 8px;
            padding: 0.75rem 1.5rem;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .apply-btn:hover {
            background: #45a049;
        }

        .order-summary, .product-card {
            background: #fff;
            border-radius: 10px;
            padding: 1.5rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .summary-item {
            display: flex;
            justify-content: space-between;
            padding: 0.75rem 0;
            border-bottom: 1px solid #e2e8f0;
        }

        .place-order-btn {
            background: #4CAF50;
            color: white;
            border: none;
            border-radius: 8px;
            padding: 1rem;
            width: 100%;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .place-order-btn:hover {
            background: #45a049;
            transform: translateY(-2px);
        }

        .add-address-btn {
            background: transparent;
            border: 2px dashed #4CAF50;
            color: #4CAF50;
            border-radius: 8px;
            padding: 1rem;
            width: 100%;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .add-address-btn:hover {
            background: #f1f8f1;
        }
    </style>    
  <form action="/placeOrder" method="POST">
    <div class="checkout-container">
        <h1 class="section-title text-center mb-5">Secure Checkout</h1>

        <div class="row">
            <!-- Left Column (Addresses) -->
            <div class="col-lg-6">
                <div class="address-box">
                    <h2 class="section-title">Delivery Address</h2>
                    <% address.forEach(addr => { %>
                        <div class="address-card">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="address" value="<%= addr._id %>">
                                <label class="form-check-label">
                                    <strong><%= addr.addressType %></strong><br>
                                    <%= addr.name %><br>
                                    <%= addr.landMark %>, <%= addr.city %>, <%= addr.state %>,<br>
                                    <%= addr.pincode %>,<br>
                                    <%= addr.phone %>
                                </label>
                            </div>
                            <div class="address-actions mt-2">
                                <button class="btn btn-sm btn-outline-primary edit-address" 
                                    data-address-id="<%= addr._id %>"
                                    data-address-type="<%= addr.addressType %>"
                                    data-name="<%= addr.name %>"
                                    data-phone="<%= addr.phone %>"
                                    data-altphone="<%= addr.altPhone %>"
                                    data-landmark="<%= addr.landMark %>"
                                    data-city="<%= addr.city %>"
                                    data-state="<%= addr.state %>"
                                   
                                    data-pincode="<%= addr.pincode %>"
                                    data-bs-toggle="modal" data-bs-target="#editAddressModal">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                            </div>
                        </div>
                    <% }) %>

                    <button class="add-address-btn mt-3" data-bs-toggle="modal" data-bs-target="#addAddressModal">
                        <i class="fas fa-plus me-2"></i> Add New Address
                    </button>
                </div>
            </div>

            <!-- Right Column (Order Summary, Payment, Coupon) -->
            <div class="col-lg-6">
                <!-- Order Summary Box -->
                <div class="order-summary">
                    <h2 class="section-title">Order Summary</h2>
                    <% let total = 0; %>
                    <% if(cart.length > 0){ %>
                        <% cart.forEach(item => { %>
                            <div class="summary-item">
                                <div>
                                    <h6 class="mb-1"><%= item.productId.productName %></h6>
                                    <small class="text-muted"><%= item.quantity %> x ₹<%= item.price %></small>
                                </div>
                                <span><strong>₹<%= item.quantity * item.price %></strong></span> 
                                <% total +=item.totalPrice;%> 
                            </div>
                        <% }) %>
                    <% } %>

                    <div class="summary-item">
                        <span>Shipping</span>
                        <span>Free</span>
                    </div>
                    <div class="summary-item">
                        <span>Discount</span>
                        <span class="text-success">-₹0</span>
                    </div>
                    <div class="summary-item">
                        <strong>Total</strong>
                        <strong><%=total %></strong> 
                    </div>
                </div>

                <!-- Coupon Section -->
                <div class="coupon-section mt-3">
                    <h2 class="section-title">Have a Coupon?</h2>
                    <div class="input-group">
                        <input type="text" name="coupon" class="coupon-input" placeholder="Enter coupon code">
                        <button class="apply-btn ms-2">Apply</button>
                    </div>
                </div>

                <!-- Payment Method Box -->
                <div class="product-card mt-3">
                    <h2 class="section-title">Payment Method</h2>
                    <div class="payment-methods">
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="paymentMethod" id="cod" value="Cash on Delivery">
                            <label class="form-check-label" for="cod">
                                Cash on Delivery
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="paymentMethod" id="wallet" value="Wallet Balance">
                            <label class="form-check-label" for="wallet">
                                Wallet Balance
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="paymentMethod" id="upi" value="UPI Payment">
                            <label class="form-check-label" for="upi">
                                UPI Payment
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="paymentMethod" id="card" value="Credit/Debit Card">
                            <label class="form-check-label" for="card">
                                Credit/Debit Card
                            </label>
                        </div>
                    </div>

                    <!-- Place Order Button Inside Payment Method -->
                    <button type="submit" class="btn btn-success mt-4 w-100" id="placeOrderBtn">
                        <i class="fas fa-check me-2"></i> Place Order
                    </button>
                </div>
            </div>
        </div>
    </div>
</form>


<div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addAddressModalLabel">Add New Address</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Add Address Form -->
                <form id="addAddressForm" action="/add-checkout-address" method="POST" novalidate>
                    <!-- Address Type with Toggle -->
                    <div class="mb-3">
                        <label for="addressType" class="mb-2" style="font-weight: 500;">Address Type</label>
                        <select class="form-control p-3" id="addressType" name="addressType" required>
                            <option value="">Select Address Type</option>
                            <option value="Home">Home</option>
                            <option value="Work">Work</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>

                    <!-- Full Name -->
                    <div class="mb-3">
                        <label for="name" class="form-label">Full Name</label>
                        <input type="text" class="form-control" id="name" name="name" required>
                    </div>

                    <!-- City -->
                    <div class="mb-3">
                        <label for="city" class="form-label">City</label>
                        <input type="text" class="form-control" id="city" name="city" required>
                    </div>

                    <!-- Landmark -->
                    <div class="mb-3">
                        <label for="landMark" class="form-label">Landmark</label>
                        <input type="text" class="form-control" id="landMark" name="landMark" required>
                    </div>

                    <!-- State -->
                    <div class="mb-3">
                        <label for="state" class="form-label">State</label>
                        <input type="text" class="form-control" id="state" name="state" required>
                    </div>

                    <!-- Pincode -->
                    <div class="mb-3">
                        <label for="pincode" class="form-label">Pincode</label>
                        <input type="number" class="form-control" id="pincode" name="pincode" required>
                    </div>

                    <!-- Phone Number -->
                    <div class="mb-3">
                        <label for="phone" class="form-label">Phone Number</label>
                        <input type="text" class="form-control" id="phone" name="phone" required>
                    </div>

                    <!-- Alternate Phone Number -->
                    <div class="mb-3">
                        <label for="altPhone" class="form-label">Alternate Phone Number</label>
                        <input type="text" class="form-control" id="altPhone" name="altPhone" required>
                    </div>

                    <button type="submit" class="btn btn-success">Save Address</button>
                </form>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="editAddressModal" tabindex="-1" aria-labelledby="editAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editAddressForm" action="/edit-checkout-address" method="POST" novalidate>
                    <input type="hidden" id="editAddressId" name="addressId">
                    <!-- Same fields as your add address form -->
                    <div class="mb-3">
                        <label for="editAddressType" class="mb-2">Address Type</label>
                        <select class="form-control p-3" id="editAddressType" name="addressType" required>
                            <option value="Home">Home</option>
                            <option value="Work">Work</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editName" class="form-label">Full Name</label>
                        <input type="text" class="form-control" id="editName" name="name" >
                    </div>
                    <div class="mb-3">
                        <label for="editLandmark" class="form-label">Landmark</label>
                        <input type="text" class="form-control" id="editLandmark" name="landMark" >
                    </div>
                    <div class="mb-3">
                        <label for="editCity" class="form-label">City</label>
                        <input type="text" class="form-control" id="editCity" name="city">
                    </div>
                    <div class="mb-3">
                        <label for="editState" class="form-label">State</label>
                        <input type="text" class="form-control" id="editState" name="state">
                    </div>
                    
                    <div class="mb-3">
                        <label for="editPincode" class="form-label">Pincode</label>
                        <input type="number" class="form-control" id="editPincode" name="pincode" >
                    </div>
                    <div class="mb-3">
                        <label for="editPhone" class="form-label">Phone Number</label>
                        <input type="number" class="form-control" id="editPhone" name="phone">
                    </div>
                    <div class="mb-3">
                        <label for="editAltPhone" class="form-label">Alternate Phone Number</label>
                        <input type="number" class="form-control" id="editAltPhone" name="altPhone">
                    </div>
                   
                    <button type="submit" class="btn" style="background-color: #45a049;color:#fff;">Update Address</button>
                </form>
            </div>
        </div>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>

    document.addEventListener("DOMContentLoaded", function () {
        // Function to show edit address modal
        function showEditAddressModal(button) {
            const modal_element = document.getElementById("editAddressModal");
            
            // Populate modal fields with existing address data
            modal_element.querySelector("#editAddressId").value = button.getAttribute('data-address-id');
            modal_element.querySelector("#editAddressType").value = button.getAttribute('data-address-type');
            modal_element.querySelector("#editName").value = button.getAttribute('data-name');
            modal_element.querySelector("#editPhone").value = button.getAttribute('data-phone');
            modal_element.querySelector("#editAltPhone").value = button.getAttribute('data-altphone') || "";
            modal_element.querySelector("#editLandmark").value = button.getAttribute('data-landmark');
            modal_element.querySelector("#editCity").value = button.getAttribute('data-city');
            modal_element.querySelector("#editState").value = button.getAttribute('data-state');
           
            modal_element.querySelector("#editPincode").value = button.getAttribute('data-pincode');
            
            // Use jQuery or Bootstrap's modal method
            if (window.bootstrap) {
                const modal = new bootstrap.Modal(modal_element);
                modal.show();
            } else {
                $(modal_element).modal('show');
            }
        }

        // Delegated event listener for edit buttons
        document.body.addEventListener('click', function(e) {
            const editButton = e.target.closest('.edit-address');
            if (editButton) {
                e.preventDefault();
                showEditAddressModal(editButton);
            }
        });

        // Delegated event listener for add address button
        document.body.addEventListener('click', function(e) {
            const addButton = e.target.closest('.add-address-btn');
            if (addButton) {
                e.preventDefault();
                if (window.bootstrap) {
                    const modal = new bootstrap.Modal(document.getElementById('addAddressModal'));
                    modal.show();
                } else {
                    $('#addAddressModal').modal('show');
                }
            }
        });

        // Update the add address form submission
        const formA = document.getElementById("addAddressForm");
        formA.addEventListener("submit", function (event) {
            event.preventDefault();

            // Collect form data
            const formData = {
                addressType: document.getElementById("addressType").value.trim(),
                name: document.getElementById("name").value.trim(),
                city: document.getElementById("city").value.trim(),
                landMark: document.getElementById("landMark").value.trim(),
                state: document.getElementById("state").value.trim(),
                pincode: document.getElementById("pincode").value.trim(),
                phone: document.getElementById("phone").value.trim(),
                altPhone: document.getElementById("altPhone").value.trim()
            };

            // Validate form data
            const errors = [];
            if (!formData.addressType) errors.push("Address Type is required");
            if (!formData.name) errors.push("Name is required");
            if (!formData.city) errors.push("City is required");
            if (!formData.landMark) errors.push("Landmark is required");
            if (!formData.state) errors.push("State is required");
            if (!formData.pincode || !/^\d{6}$/.test(formData.pincode)) errors.push("Valid Pincode is required");
            if (!formData.phone || !/^\d{10}$/.test(formData.phone)) errors.push("Valid Phone number is required");
            if (!formData.altPhone || !/^\d{10}$/.test(formData.altPhone)) errors.push("Valid Alternate Phone number is required");

            if (errors.length > 0) {
                alert(errors.join("\n"));
                return;
            }

            // Send data to server
            fetch("/add-checkout-address", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.address) {
                    // Dynamically add new address to the list
                    const addressList = document.querySelector(".address-box");
                    const newAddressCard = document.createElement("div");
                    newAddressCard.classList.add("address-card");
                    newAddressCard.innerHTML = `
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="address" value="${data.address._id}">
                            <label class="form-check-label">
                                <strong>${data.address.addressType}</strong><br>
                                ${data.address.name}<br>
                                ${data.address.landMark}, ${data.address.city}, ${data.address.state},<br>
                               ${data.address.pincode},<br>
                                ${data.address.phone}
                            </label>
                        </div>
                        <div class="address-actions mt-2">
                            <button class="btn btn-sm btn-outline-primary edit-address" 
                                data-address-id="${data.address._id}"
                                data-address-type="${data.address.addressType}"
                                data-name="${data.address.name}"
                                data-phone="${data.address.phone}"
                                data-altphone="${data.address.altPhone}"
                                data-landmark="${data.address.landMark}"
                                data-city="${data.address.city}"
                                data-state="${data.address.state}"
                                
                                data-pincode="${data.address.pincode}">
                                Edit
                            </button>
                        </div>
                    `;
                    addressList.appendChild(newAddressCard);

                    // Close the modal
                    if (window.bootstrap) {
                        const addAddressModal = bootstrap.Modal.getInstance(document.getElementById('addAddressModal'));
                        addAddressModal.hide();
                    } else {
                        $('#addAddressModal').modal('hide');
                    }

                    // Reset the form
                    formA.reset();
                } else {
                    alert("Failed to add address");
                }
            })
            .catch(error => {
                console.error("Error:", error);
                alert("An error occurred while adding the address");
            });
        });

        // Update the edit address form submission
        const form = document.getElementById("editAddressForm");
        form.addEventListener("submit", function (event) {
            event.preventDefault();

            // Collect form data
            const formData = {
                addressId: document.getElementById("editAddressId").value.trim(),
                addressType: document.getElementById("editAddressType").value.trim(),
                name: document.getElementById("editName").value.trim(),
                city: document.getElementById("editCity").value.trim(),
                landMark: document.getElementById("editLandmark").value.trim(),
                state: document.getElementById("editState").value.trim(),
                pincode: document.getElementById("editPincode").value.trim(),
                phone: document.getElementById("editPhone").value.trim(),
                altPhone: document.getElementById("editAltPhone").value.trim()
            };

            // Validate form data
            const errors = [];
            if (!formData.addressType) errors.push("Address Type is required");
            if (!formData.name) errors.push("Name is required");
            if (!formData.city) errors.push("City is required");
            if (!formData.landMark) errors.push("Landmark is required");
            if (!formData.state) errors.push("State is required");
            if (!formData.pincode || !/^\d{6}$/.test(formData.pincode)) errors.push("Valid Pincode is required");
            if (!formData.phone || !/^\d{10}$/.test(formData.phone)) errors.push("Valid Phone number is required");
            if (!formData.altPhone || !/^\d{10}$/.test(formData.altPhone)) errors.push("Valid Alternate Phone number is required");

            if (errors.length > 0) {
                alert(errors.join("\n"));
                return;
            }

            // Send data to server
            fetch("/edit-checkout-address", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.address) {
                    // Find and update the existing address card
                    const addressCard = document.querySelector(`.edit-address[data-address-id="${data.address._id}"]`).closest('.address-card');
                    const label = addressCard.querySelector('.form-check-label');
                    label.innerHTML = `
                        <strong>${data.address.addressType}</strong><br>
                        ${data.address.name}<br>
                        ${data.address.landMark}, ${data.address.city}, ${data.address.state},<br>
                        ${data.address.pincode},<br>
                        ${data.address.phone}
                    `;

                    // Update data attributes for edit button
                    const editButton = addressCard.querySelector('.edit-address');
                    editButton.setAttribute('data-address-type', data.address.addressType);
                    editButton.setAttribute('data-name', data.address.name);
                    editButton.setAttribute('data-phone', data.address.phone);
                    editButton.setAttribute('data-altphone', data.address.altPhone);
                    editButton.setAttribute('data-landmark', data.address.landMark);
                    editButton.setAttribute('data-city', data.address.city);
                    editButton.setAttribute('data-state', data.address.state);
                   
                    editButton.setAttribute('data-pincode', data.address.pincode);

                    // Close the modal
                    if (window.bootstrap) {
                        const editAddressModal = bootstrap.Modal.getInstance(document.getElementById('editAddressModal'));
                        editAddressModal.hide();
                    } else {
                        $('#editAddressModal').modal('hide');
                    }

                    // Reset the form
                    form.reset();
                } else {
                    alert("Failed to edit address");
                }
            })
            .catch(error => {
                console.error("Error:", error);
                alert("An error occurred while editing the address");
            });
        });

        // Ensure edit and add address buttons work with dynamic content
        document.querySelector(".address-box").addEventListener("click", function(e) {
            const editButton = e.target.closest(".edit-address");
            if (editButton) {
                e.preventDefault(); // Prevent any default behavior
                const modal = new bootstrap.Modal(document.getElementById("editAddressModal"));
                
                // Populate modal fields with existing address data
                const modal_element = document.getElementById("editAddressModal");
                modal_element.querySelector("#editAddressId").value = editButton.dataset.addressId;
                modal_element.querySelector("#editAddressType").value = editButton.dataset.addressType;
                modal_element.querySelector("#editName").value = editButton.dataset.name;
                modal_element.querySelector("#editPhone").value = editButton.dataset.phone;
                modal_element.querySelector("#editAltPhone").value = editButton.dataset.altphone || "";
                modal_element.querySelector("#editLandmark").value = editButton.dataset.landmark;
                modal_element.querySelector("#editCity").value = editButton.dataset.city;
                modal_element.querySelector("#editState").value = editButton.dataset.state;
             
                modal_element.querySelector("#editPincode").value = editButton.dataset.pincode;
                
                modal.show();
            }
        });

        // Ensure add address button works
        document.querySelector(".add-address-btn").addEventListener("click", function (e) {
            e.preventDefault(); // Prevent any default behavior
            const modal = new bootstrap.Modal(document.getElementById("addAddressModal"));
            modal.show();
        });

        document.querySelectorAll('.address-card').forEach(card => {
            card.addEventListener('click', () => {
                document.querySelectorAll('.address-card').forEach(c => c.classList.remove('selected'));
                card.classList.add('selected');

                const radio = card.querySelector('input[type="radio"]');
                radio.checked = true;
                radio.dispatchEvent(new Event("change")); 
            });
        });

        document.querySelectorAll('.payment-methods').forEach(option => {
            option.addEventListener('click', () => {
                document.querySelectorAll('.payment-methods').forEach(o => o.classList.remove('selected'));
                option.classList.add('selected');

                const radio = option.querySelector('input[type="radio"]');
                radio.checked = true;
                radio.dispatchEvent(new Event("change")); 
            });
        });

        document.getElementById('placeOrderBtn').addEventListener('click', async function(event) {
            event.preventDefault();

            const selectedAddress = document.querySelector("input[name='address']:checked");
            const selectedPayment = document.querySelector("input[name='paymentMethod']:checked");

            if (!selectedAddress || !selectedPayment) {
                Swal.fire("Error!", "Please select an address and payment method.", "error");
                return;
            }

            const addressId = selectedAddress.value;
            const paymentMethod = selectedPayment.value;

            try {
                const response = await fetch('/placeOrder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        address: addressId,
                        paymentMethod: paymentMethod
                    })
                });

                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        title: 'Order Placed!',
                        text: 'Your order has been placed successfully.',
                        icon: 'success',
                        confirmButtonText: 'Continue Shopping'
                    }).then(() => {
                        window.location.href = '/';
                    });
                } else {
                    Swal.fire("Error!", data.message || "Failed to place order.", "error");
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire("Error!", "An unexpected error occurred.", "error");
            }
        });
    });


</script>




	<!-- Footer -->
	<%- include ('component/footer.ejs') %> 

	<!-- Scripts -->
	<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
	
	<!-- Include other scripts -->
	<%- include ('component/script.ejs') %> 