<!DOCTYPE html>
<html lang="en">
<%- include ('../partials/user/head.ejs') %>
<body class="animsition">
    
    <!-- Header -->
    <%- include ('../partials/user/header.ejs') %>

    <!-- Cart -->
    <%- include ('component/cart.ejs') %>

    <!-- Breadcrumb -->
    <div class="container">
        <div class="bread-crumb flex-w p-l-25 p-r-15 p-t-30 p-lr-0-lg">
            <a href="/" class="stext-109 cl8 hov-cl1 trans-04">
                Home
                <i class="fa fa-angle-right m-l-9 m-r-10" aria-hidden="true"></i>
            </a>
            <span class="stext-109 cl4">Checkout</span>
        </div>
    </div>

    <!-- External Styles and Scripts -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <!-- Custom Styles (unchanged) -->
    <style>
        .checkout-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        .section-title {
            font-size: 1.5rem;
            color: #2d3436;
            margin-bottom: 1.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #e2e8f0;
        }
        .address-card {
            background: #fff;
            border: 1px solid #e2e8f0;
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        .address-box {
            background: #fff;
            border: 1px solid #e2e8f0;
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }
        .address-card:hover {
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }
        .address-card.selected {
            border: 2px solid #4CAF50;
        }
        .product-card {
            background: #fff;
            border-radius: 10px;
            padding: 1.5rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        .payment-methods {
            background: #fff;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 0.75rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .payment-methods:hover {
            background: #f8f9fa;
        }
        .payment-methods.selected {
            border-color: #4CAF50;
            background: #f1f8f1;
        }
        .coupon-section {
            background: #fff;
            border-radius: 10px;
            padding: 1.5rem;
            margin-top: 1.5rem;
        }
        .coupon-input {
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 0.75rem;
            width: 70%;
        }
        .apply-btn {
            background: #4CAF50;
            color: white;
            border: none;
            border-radius: 8px;
            padding: 0.75rem 1.5rem;
            cursor: pointer;
            transition: background 0.3s ease;
        }
        .apply-btn:hover {
            background: #45a049;
        }
        .order-summary {
            background: #fff;
            border-radius: 10px;
            padding: 1.5rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        .summary-item {
            display: flex;
            justify-content: space-between;
            padding: 0.75rem 0;
            border-bottom: 1px solid #e2e8f0;
        }
        .place-order-btn {
            background: #4CAF50;
            color: white;
            border: none;
            border-radius: 8px;
            padding: 1rem;
            width: 100%;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .place-order-btn:hover {
            background: #45a049;
            transform: translateY(-2px);
        }
        .add-address-btn {
            background: transparent;
            border: 2px dashed #4CAF50;
            color: #4CAF50;
            border-radius: 8px;
            padding: 1rem;
            width: 100%;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .add-address-btn:hover {
            background: #f1f8f1;
        }
        .available-coupons {
            margin-top: 1rem;
            max-height: 200px;
            overflow-y: auto;
        }
        .coupon-card {
            border: 1px dashed #e2e8f0;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 0.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
            background: #f8fafc;
        }
        .coupon-card:hover {
            border-color: #4CAF50;
            background: #f1f8f1;
            transform: translateY(-2px);
        }
        .coupon-code {
            font-family: monospace;
            font-weight: 600;
            color: #2d3436;
            background: #fff;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            border: 1px solid #e2e8f0;
        }
        .coupon-details {
            font-size: 0.9rem;
            color: #64748b;
            margin-top: 0.5rem;
        }
        .coupon-expiry {
            font-size: 0.8rem;
            color: #94a3b8;
        }
        .no-coupons {
            text-align: center;
            padding: 1rem;
            color: #64748b;
        }
    </style>

    <!-- Checkout Form -->
    <form id="orderForm">
        <div class="checkout-container">
            <h1 class="section-title text-center mb-5">Checkout</h1>

            <!-- Hidden Inputs -->
            <input type="hidden" name="appliedCouponId" id="appliedCouponId" value="">
            <input type="hidden" name="discountAmount" id="hidden-discount-amount" value="0">
            <input type="hidden" name="finalAmount" id="hidden-final-amount" value="<%= total %>">
            <input type="hidden" name="quantities" id="cart-quantities" value="<%= cart.map(item => item.quantity).join(',') %>">

            <div class="row g-4">
                <!-- Left Column (Addresses) -->
                <div class="col-lg-7">
                    <div class="address-box">
                        <h2 class="section-title">Delivery Address</h2>
                        <% address.forEach(addr => { %>
                            <div class="address-card" data-address-id="<%= addr._id %>">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="address" value="<%= addr._id %>" aria-label="Select <%= addr.addressType %> address">
                                    <label class="form-check-label">
                                        <strong><%= addr.addressType %></strong><br>
                                        <%= addr.name %><br>
                                        <%= addr.landMark %>, <%= addr.city %>, <%= addr.state %>,<br>
                                        <%= addr.pincode %>,<br>
                                        <%= addr.phone %>
                                    </label>
                                </div>
                                <div class="address-actions mt-2">
                                    <button class="btn btn-sm btn-outline-primary edit-address"
                                        data-address-id="<%= addr._id %>"
                                        data-address-type="<%= addr.addressType %>"
                                        data-name="<%= addr.name %>"
                                        data-phone="<%= addr.phone %>"
                                        data-altphone="<%= addr.altPhone %>"
                                        data-landmark="<%= addr.landMark %>"
                                        data-city="<%= addr.city %>"
                                        data-state="<%= addr.state %>"
                                        data-pincode="<%= addr.pincode %>"
                                        data-bs-toggle="modal" data-bs-target="#addressModal">
                                        <i class="fas fa-edit"></i> Edit
                                    </button>
                                </div>
                            </div>
                        <% }) %>
                        <button class="add-address-btn mt-3" type="button" data-bs-toggle="modal" data-bs-target="#addressModal">
                            <i class="fas fa-plus me-2"></i> Add New Address
                        </button>
                    </div>
                </div>

                <!-- Right Column (Order Summary, Coupon, Payment) -->
                <div class="col-lg-5">
                    <div class="order-summary mb-4">
                        <h2 class="section-title">Order Summary</h2>
                        <% cart.forEach(item => { %>
                            <div class="summary-item">
                                <div class="row align-items-center">
                                    <div class="col-3">
                                        <img src="/uploads/product-images/<%= item.productId.productImages[0] %>" 
                                            alt="Product Image" class="img-fluid rounded-3" 
                                            style="border: 1px solid #eee;">
                                    </div>
                                    <div class="col-9">
                                        <h6 class="mb-1"><%= item.productId.productName %></h6>
                                        <div class="d-flex justify-content-between">
                                            <small class="text-muted"><%= item.quantity %> x ₹<%= item.price %></small>
                                            <span><strong>₹<%= item.price * item.quantity %></strong></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        <% }) %>
                        <div class="summary-item">
                            <span>Shipping</span>
                            <span>Free</span>
                        </div>
                        <div class="summary-item">
                            <span>Discount</span>
                            <span class="text-success" id="discount-amount">-₹0</span>
                        </div>
                        <div class="summary-item">
                            <strong>Total</strong>
                            <strong id="final-amount">₹<%= total %></strong>
                        </div>
                    </div>

                    <!-- Coupon Section -->
                    <div class="coupon-section mb-4">
                        <h2 class="section-title">Have a Coupon?</h2>
                        <div class="input-group">
                            <input type="text" name="coupon" id="couponInput" class="coupon-input" placeholder="Enter coupon code">
                            <button type="button" id="apply-coupon" class="apply-btn ms-2">Apply</button>
                        </div>
                        <div id="coupon-error" style="color: red; display: none;"></div>
                        
                        <!-- Available Coupons -->
                        <div class="available-coupons mt-3">
                            <h6 class="mb-3">Available Coupons</h6>
                            <% if (typeof coupons !== 'undefined' && coupons.length > 0) { %>
                                <% coupons.forEach(coupon => { %>
                                    <div class="coupon-card" onclick="selectCoupon('<%= coupon.name %>')">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <span class="coupon-code"><%= coupon.name %></span>
                                            <span class="badge bg-success">
                                                <%= coupon.couponType === 'percentage' ? coupon.offerPrice + '%' : '₹' + coupon.offerPrice %>
                                            </span>
                                        </div>
                                        <div class="coupon-details">
                                            <% if (coupon.couponType === 'percentage') { %>
                                                <%= coupon.offerPrice %>% off up to ₹<%= coupon.maximumDiscountAmount %>
                                            <% } else { %>
                                                Flat ₹<%= coupon.offerPrice %> off
                                            <% } %>
                                            | Min. Purchase: ₹<%= coupon.minimumPrice %>
                                        </div>
                                        <div class="coupon-expiry">
                                            Valid till: <%= new Date(coupon.expireOn).toLocaleDateString() %>
                                        </div>
                                    </div>
                                <% }) %>
                            <% } else { %>
                                <div class="no-coupons">
                                    <i class="fas fa-ticket-alt me-2"></i>
                                    No coupons available at the moment
                                </div>
                            <% } %>
                        </div>
                    </div>

                    <!-- Payment Method Box -->
                    <div class="product-card">
                        <h2 class="section-title">Payment Method</h2>
                        <div class="payment-methods mb-3">
                            <input type="radio" name="paymentMethod" value="UPI" id="upiPayment">
                            <label for="upiPayment">
                                <i class="fas fa-mobile-alt"></i> UPI Payment
                            </label>
                        </div>
                        <div class="payment-methods mb-3">
                            <input type="radio" name="paymentMethod" value="COD" id="codPayment">
                            <label for="codPayment">
                                <i class="fas fa-money-bill"></i> Cash on Delivery
                            </label>
                        </div>
                        <% if (!wallet || wallet.length === 0) { %>
                            <div class="payment-methods mb-3">
                                <input type="text" name="paymentMethod" value="wallet" id="walletPayment" disabled>
                                <label for="walletPayment">
                                    <i class="fas fa-wallet"></i> Wallet is not active
                                </label>
                            </div>
                        <% } else { %>
                            <div class="payment-methods mb-3">
                                <input type="radio" name="paymentMethod" value="wallet" id="walletPayment">
                                <label for="walletPayment">
                                    <i class="fas fa-wallet"></i> Wallet Payment<br>
                                    Balance: ₹<%= wallet.balance %>
                                </label>
                            </div>
                        <% } %>
                        <button type="submit" class="place-order-btn" id="placeOrderBtn">
                            <i class="fas fa-check me-2"></i> Place Order
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </form>

    <!-- Single Address Modal (for Add/Edit) -->
    <div class="modal fade" id="addressModal" tabindex="-1" aria-labelledby="addressModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addressModalLabel">Add/Edit Address</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addressForm" novalidate>
                        <input type="hidden" id="addressId" name="addressId">
                        <div class="mb-3">
                            <label for="addressType" class="form-label">Address Type</label>
                            <select class="form-control" id="addressType" name="addressType" required>
                                <option value="" disabled>Select Address Type</option>
                                <option value="Home">Home</option>
                                <option value="Work">Work</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="name" class="form-label">Full Name</label>
                            <input type="text" class="form-control" id="name" name="name" required>
                        </div>
                        <div class="mb-3">
                            <label for="phone" class="form-label">Phone Number</label>
                            <input type="tel" class="form-control" id="phone" name="phone" required>
                        </div>
                        <div class="mb-3">
                            <label for="altPhone" class="form-label">Alternate Phone (Optional)</label>
                            <input type="tel" class="form-control" id="altPhone" name="altPhone">
                        </div>
                        <div class="mb-3">
                            <label for="landMark" class="form-label">Landmark</label>
                            <input type="text" class="form-control" id="landMark" name="landMark" required>
                        </div>
                        <div class="mb-3">
                            <label for="city" class="form-label">City</label>
                            <input type="text" class="form-control" id="city" name="city" required>
                        </div>
                        <div class="mb-3">
                            <label for="state" class="form-label">State</label>
                            <input type="text" class="form-control" id="state" name="state" required>
                        </div>
                        <div class="mb-3">
                            <label for="pincode" class="form-label">Pincode</label>
                            <input type="text" class="form-control" id="pincode" name="pincode" required>
                        </div>
                        <button type="submit" class="btn btn-success" id="saveAddressBtn">Save Address</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Consolidated Script -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const addressForm = document.getElementById('addressForm');
            const addressModal = document.getElementById('addressModal');
            const modalTitle = document.getElementById('addressModalLabel');
            const saveAddressBtn = document.getElementById('saveAddressBtn');
            const orderForm = document.getElementById('orderForm');
            const placeOrderBtn = document.getElementById('placeOrderBtn');
            const couponInput = document.getElementById('couponInput');
            const applyButton = document.getElementById('apply-coupon');
            const discountAmount = document.getElementById('discount-amount');
            const finalAmount = document.getElementById('final-amount');
            const errorDiv = document.getElementById('coupon-error');
            const appliedCouponId = document.getElementById('appliedCouponId');
            const hiddenDiscountAmount = document.getElementById('hidden-discount-amount');
            const hiddenFinalAmount = document.getElementById('hidden-final-amount');
            const total = <%= total %>;
            let isProcessing = false;

            // Validation function for address form
            function validateFormData(formData) {
                const errors = [];
                if (!formData.addressType) errors.push("Address Type is required");
                if (!formData.name) errors.push("Name is required");
                if (!formData.phone || !/^\d{10}$/.test(formData.phone)) errors.push("Valid 10-digit Phone number is required");
                if (formData.altPhone && !/^\d{10}$/.test(formData.altPhone)) errors.push("Valid 10-digit Alternate Phone number is required");
                if (!formData.landMark) errors.push("Landmark is required");
                if (!formData.city) errors.push("City is required");
                if (!formData.state) errors.push("State is required");
                if (!formData.pincode || !/^\d{6}$/.test(formData.pincode)) errors.push("Valid 6-digit Pincode is required");
                return errors;
            }

            // Handle address card selection
            document.querySelectorAll('.address-card').forEach(card => {
                card.addEventListener('click', function(e) {
                    if (e.target.closest('.edit-address')) return; // Skip if clicking edit button
                    document.querySelectorAll('.address-card').forEach(c => c.classList.remove('selected'));
                    this.classList.add('selected');
                    const radio = this.querySelector('input[type="radio"]');
                    radio.checked = true;
                    radio.dispatchEvent(new Event('change'));
                });
            });

            // Handle edit button clicks
            document.querySelector('.address-box').addEventListener('click', function(e) {
                const editBtn = e.target.closest('.edit-address');
                if (!editBtn) return;

                e.preventDefault();
                modalTitle.textContent = 'Edit Address';
                saveAddressBtn.textContent = 'Update Address';
                saveAddressBtn.className = 'btn btn-primary';

                // Populate form with existing data
                addressForm.querySelector('#addressId').value = editBtn.dataset.addressId || '';
                addressForm.querySelector('#addressType').value = editBtn.dataset.addressType || '';
                addressForm.querySelector('#name').value = editBtn.dataset.name || '';
                addressForm.querySelector('#phone').value = editBtn.dataset.phone || '';
                addressForm.querySelector('#altPhone').value = editBtn.dataset.altphone || '';
                addressForm.querySelector('#landMark').value = editBtn.dataset.landmark || '';
                addressForm.querySelector('#city').value = editBtn.dataset.city || '';
                addressForm.querySelector('#state').value = editBtn.dataset.state || '';
                addressForm.querySelector('#pincode').value = editBtn.dataset.pincode || '';
            });

            // Handle add address button click
            document.querySelector('.add-address-btn').addEventListener('click', function(e) {
                e.preventDefault();
                modalTitle.textContent = 'Add New Address';
                saveAddressBtn.textContent = 'Save Address';
                saveAddressBtn.className = 'btn btn-success';
                addressForm.reset();
                addressForm.querySelector('#addressId').value = '';
            });

            // Handle address form submission
            addressForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                e.stopPropagation(); // Prevent bubbling to parent form

                const formData = Object.fromEntries(new FormData(this));
                const errors = validateFormData(formData);

                if (errors.length > 0) {
                    Swal.fire('Validation Error', errors.join('<br>'), 'error');
                    return;
                }

                const isEdit = formData.addressId;
                const url = isEdit ? '/edit-checkout-address' : '/add-checkout-address';

                try {
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(formData)
                    });

                    const data = await response.json();

                    if (response.ok) {
                        if (isEdit) {
                            // Update existing address card
                            const addressCard = document.querySelector(`.address-card[data-address-id="${data.address._id}"]`);
                            const label = addressCard.querySelector('.form-check-label');
                            label.innerHTML = `
                                <strong>${data.address.addressType}</strong><br>
                                ${data.address.name}<br>
                                ${data.address.landMark}, ${data.address.city}, ${data.address.state},<br>
                                ${data.address.pincode},<br>
                                ${data.address.phone}
                            `;
                            const editBtn = addressCard.querySelector('.edit-address');
                            Object.entries(data.address).forEach(([key, value]) => {
                                editBtn.dataset[key === 'landMark' ? 'landmark' : key] = value || '';
                            });
                            Swal.fire('Success', 'Address updated successfully', 'success');
                        } else {
                            // Add new address card
                            const addressBox = document.querySelector('.address-box');
                            const newAddressCard = document.createElement('div');
                            newAddressCard.className = 'address-card';
                            newAddressCard.dataset.addressId = data.address._id;
                            newAddressCard.innerHTML = `
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="address" value="${data.address._id}" aria-label="Select ${data.address.addressType} address">
                                    <label class="form-check-label">
                                        <strong>${data.address.addressType}</strong><br>
                                        ${data.address.name}<br>
                                        ${data.address.landMark}, ${data.address.city}, ${data.address.state},<br>
                                        ${data.address.pincode},<br>
                                        ${data.address.phone}
                                    </label>
                                </div>
                                <div class="address-actions mt-2">
                                    <button class="btn btn-sm btn-outline-primary edit-address"
                                        data-address-id="${data.address._id}"
                                        data-address-type="${data.address.addressType}"
                                        data-name="${data.address.name}"
                                        data-phone="${data.address.phone}"
                                        data-altphone="${data.address.altPhone || ''}"
                                        data-landmark="${data.address.landMark}"
                                        data-city="${data.address.city}"
                                        data-state="${data.address.state}"
                                        data-pincode="${data.address.pincode}"
                                        data-bs-toggle="modal" data-bs-target="#addressModal">
                                        <i class="fas fa-edit"></i> Edit
                                    </button>
                                </div>
                            `;
                            addressBox.insertBefore(newAddressCard, document.querySelector('.add-address-btn'));
                            newAddressCard.addEventListener('click', function(e) {
                                if (e.target.closest('.edit-address')) return;
                                document.querySelectorAll('.address-card').forEach(c => c.classList.remove('selected'));
                                this.classList.add('selected');
                                const radio = this.querySelector('input[type="radio"]');
                                radio.checked = true;
                                radio.dispatchEvent(new Event('change'));
                            });
                            Swal.fire('Success', 'Address added successfully', 'success');
                        }

                        // Close modal
                        bootstrap.Modal.getInstance(addressModal).hide();
                        addressForm.reset();
                    } else {
                        Swal.fire('Error', data.error || 'Failed to process address', 'error');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire('Error', 'An error occurred while processing the address', 'error');
                }
            });

            // Coupon Handling
            function selectCoupon(couponCode) {
                couponInput.value = couponCode;
                couponInput.scrollIntoView({ behavior: 'smooth' });
            }

            async function applyCoupon() {
                const couponCode = couponInput.value.trim();
                if (!couponCode) {
                    showMessage('Please enter a coupon code');
                    return;
                }

                try {
                    const response = await fetch('/apply-coupon', {
                        method: 'PATCH',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ couponCode, total: Number(total) })
                    });

                    const data = await response.json();
                    if (data.success) {
                        discountAmount.textContent = '-₹' + data.discount;
                        finalAmount.textContent = '₹' + data.finalAmount;
                        appliedCouponId.value = data.couponDetails.code;
                        hiddenDiscountAmount.value = data.discount;
                        hiddenFinalAmount.value = data.finalAmount;
                        showMessage('Coupon applied successfully!', false);
                        couponInput.disabled = true;
                        applyButton.disabled = true;
                    } else {
                        showMessage(data.message || 'Invalid coupon');
                        appliedCouponId.value = '';
                        hiddenDiscountAmount.value = '0';
                        hiddenFinalAmount.value = total;
                    }
                } catch (error) {
                    console.error('Error applying coupon:', error);
                    showMessage('Failed to apply coupon');
                    appliedCouponId.value = '';
                    hiddenDiscountAmount.value = '0';
                    hiddenFinalAmount.value = total;
                }
            }

            function showMessage(message, isError = true) {
                errorDiv.textContent = message;
                errorDiv.style.color = isError ? 'red' : 'green';
                errorDiv.style.display = 'block';
                setTimeout(() => errorDiv.style.display = 'none', 3000);
            }

            applyButton.addEventListener('click', applyCoupon);
            couponInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    applyCoupon();
                }
            });

            // Payment Method Selection
            document.querySelectorAll('.payment-methods').forEach(option => {
                option.addEventListener('click', () => {
                    document.querySelectorAll('.payment-methods').forEach(o => o.classList.remove('selected'));
                    option.classList.add('selected');
                    const radio = option.querySelector('input[type="radio"]');
                    if (radio) {
                        radio.checked = true;
                        radio.dispatchEvent(new Event('change'));
                    }
                });
            });

            // Place Order
            placeOrderBtn.addEventListener('click', async (e) => {
                e.preventDefault();
                if (isProcessing) return;

                isProcessing = true;
                placeOrderBtn.disabled = true;

                try {
                    const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
                    const addressId = document.querySelector('input[name="address"]:checked')?.value;
                    const quantities = document.getElementById('cart-quantities').value.split(',');
                    const totalPrice = total;
                    const discountAmount = hiddenDiscountAmount.value;
                    const finalAmount = hiddenFinalAmount.value;
                    const appliedCouponIdValue = appliedCouponId.value;

                    if (!paymentMethod) throw new Error('Please select a payment method');
                    if (!addressId) throw new Error('Please select a delivery address');

                    if (paymentMethod === 'UPI') {
                        const orderResponse = await fetch('/razorpay/create-cart-order', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                amount: finalAmount,
                                quantities,
                                addressId,
                                appliedCouponId: appliedCouponIdValue,
                                totalPrice,
                                discountAmount
                            })
                        });

                        const data = await orderResponse.json();
                        if (!data.success) throw new Error(data.error || 'Failed to create cart order');

                        const options = {
                            key: data.key,
                            amount: data.order.amount,
                            currency: "INR",
                            name: "Mobile Clinic",
                            description: "Payment for your cart order",
                            order_id: data.order.id,
                            handler: async function(response) {
                                const verifyResponse = await fetch('/razorpay/verify-cart-payment', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_signature: response.razorpay_signature,
                                        addressId,
                                        totalPrice,
                                        quantities,
                                        appliedCouponId: appliedCouponIdValue,
                                        discountAmount,
                                        finalAmount
                                    })
                                });

                                const verifyData = await verifyResponse.json();
                                if (verifyData.success) {
                                    if (verifyData.message.includes('Paid')) {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Payment Successful!',
                                            text: 'Your cart order has been placed.',
                                        }).then(() => window.location.href = '/');
                                    } else {
                                        Swal.fire({
                                            icon: 'warning',
                                            title: 'Payment Pending',
                                            text: 'Your order has been placed with pending payment. Please complete payment from your orders page.',
                                        }).then(() => window.location.href = '/orders');
                                    }
                                } else {
                                    throw new Error(verifyData.error || 'Cart payment verification failed');
                                }
                            },
                            theme: { color: "#3399cc" }
                        };

                        const rzp = new Razorpay(options);
                        rzp.on('payment.failed', async function(response) {
                            console.log('Payment failed:', response.error);
                            const verifyResponse = await fetch('/razorpay/verify-cart-payment', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    razorpay_payment_id: null,
                                    razorpay_order_id: data.order.id,
                                    razorpay_signature: null,
                                    addressId,
                                    totalPrice,
                                    quantities,
                                    appliedCouponId: appliedCouponIdValue,
                                    discountAmount,
                                    finalAmount
                                })
                            });

                            const verifyData = await verifyResponse.json();
                            if (verifyData.success) {
                                Swal.fire({
                                    icon: 'warning',
                                    title: 'Payment Failed',
                                    text: 'Your order has been placed with pending payment. Please try again from your orders page.',
                                }).then(() => window.location.href = '/orders');
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Order Placement Failed',
                                    text: verifyData.error || 'Failed to place order after payment failure.',
                                });
                            }
                        });
                        rzp.open();
                    } else {
                        const response = await fetch('/placeCartOrder', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                quantities,
                                address: addressId,
                                paymentMethod,
                                appliedCouponId: appliedCouponIdValue,
                                totalPrice,
                                discountAmount,
                                finalAmount
                            })
                        });

                        const data = await response.json();
                        if (data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Order Placed Successfully!',
                                text: 'Thank you for your order.',
                            }).then(() => window.location.href = '/');
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Order Failed',
                                text: data.message || 'Something went wrong.',
                            });
                        }
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Order Failed',
                        text: error.message || 'Please try again later',
                    });
                } finally {
                    isProcessing = false;
                    placeOrderBtn.disabled = false;
                }
            });
        });
    </script>

    <!-- Footer -->
    <%- include ('../partials/user/footer.ejs') %>

    <!-- Additional Scripts -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <%- include ('component/script.ejs') %>
</body>
</html>